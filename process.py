#!/usr/bin/env python3
import re
import json
import argparse
from collections import defaultdict

from odf.opendocument import load
from odf.table import TableRow, TableCell
from odf.text import P

from stocks.formula import evaluate

_FILE_RE = re.compile(r"(\w+)-(\w+)-(\w+)")

_TRANSLATION = {
    'income_statement': {
        'Revenue': 3,
        'CostOfRevenue': 7,
        'SellingGeneralAdministrative': 10,
        'ResearchDevelopment': 11,
        'InterestExpense': 20,
        'OtherExpenseIncome': 22,
        'IncomeBeforeIncomeTaxes': 23,
        'ConsolidatedNetIncomeLoss': 26,
        'NoncontrollingInterestIncome': 28,
        'PreferredStockDividendsDeclared': 37,
        'NetIncomeLossAttributableCommonShareholders': 38,
        'dilutedsharesoutstanding': 40,
        'CommonStockDividendsDeclared': 41,
    },
    'balance_sheet_statement': {
    },
    'cash_flow_statement': {
    },
}


_DIVISORS = defaultdict(lambda: 1000000.0)
_DIVISORS.update({
    'CommonStockDividendsDeclared': 1.0,
    'PreferredStockDividendsDeclared': 1.0,
})


def _get_column_ord(col):
    """
    >>> Process.get_column_ord('A')
    1
    >>> Process.get_column_ord('Z')
    26
    """
    colord = 0
    for mul, char in enumerate(col[::-1]):
        colord += (ord(char) - ord('A') + 1) * 27 ** mul
    return colord


def _getCell(sheet, rowel, col):
    colord = _get_column_ord(col)
    coln = 0
    for cell in rowel.getElementsByType(TableCell):
        n = int(cell.getAttribute('numbercolumnsrepeated') or 1)
        if coln + n > colord:
            if colord - coln == 1:  # we are in the target cell, just remove the repeated
                cell.removeAttribute('numbercolumnsrepeated')
                return cell
            else:  # we are in a previous cell, just reduce the repeated and add a new cell, which will be the target
                n = colord - coln - 1
                if n > 1:
                    cell.setAttribute('numbercolumnsrepeated', n)
        elif coln + n == colord:
            return cell
        coln += n
    raise ValueError


class Process(object):
    def __init__(self):

        parser = argparse.ArgumentParser()
        parser.add_argument('spreadsheet', help='Update given spreadsheet')
        parser.add_argument('ifile', help='Process given input json (generated by spider)')
        parser.add_argument('column', help='Column where to add new data.')

        self.args = parser.parse_args()
        self.__filled_cells = {}

    def run(self):
        doc = load(self.args.spreadsheet)
        company, statement, period_type = _FILE_RE.match(self.args.ifile).groups()
        for sheet in doc.spreadsheet.childNodes:
            if sheet.getAttribute('name') == company:
                translations = _TRANSLATION[statement]
                new_data = json.load(open(self.args.ifile))
                for fundamental in new_data['fundamentals'][::-1]:
                    if period_type == 'annual' and not fundamental['filing_type'].startswith('10-K'):
                        continue
                    for tag in fundamental['tags']:
                        if tag['tag'] in translations:
                            value = tag['value'] / _DIVISORS[tag['tag']]
                            if value:
                                row = translations[tag['tag']]
                                rowel = sheet.getElementsByType(TableRow)[row - 1]
                                cell = _getCell(sheet, rowel, self.args.column)
                                cell.setAttribute("value", value)
                                self.__filled_cells[f'{self.args.column}{row}'] = value
                                cell.setAttribute("valuetype", 'float')
                                if cell.getAttribute("formula"):
                                    cell.removeAttribute("formula")
                                if cell.firstChild is not None:
                                    cell.removeChild(cell.firstChild)
                                cell.addElement(P(text=value))
                                print(f"Updated cell {self.args.column}{row} with value {value}")

                for idx, rowel in enumerate(sheet.getElementsByType(TableRow)):
                    try:
                        cell = _getCell(sheet, rowel, self.args.column)
                    except ValueError:
                        print(f"Cell {self.args.column}{idx+1} of sheet {sheet.getAttribute('name')} is not initialized.")
                    else:
                        formula = cell.getAttribute('formula')
                        if formula is not None:
                            value = evaluate(formula, self.__filled_cells)
                            cell.setAttribute('value', value)
                            if cell.firstChild is not None:
                                cell.removeChild(cell.firstChild)

                doc.save(self.args.spreadsheet)
                break
        else:
            print(f"No sheet with name {company}")


if __name__ == '__main__':
    process = Process()
    process.run()
